Index: core/Model.py
===================================================================
--- core/Model.py	(revision 173)
+++ core/Model.py	(working copy)
@@ -21,6 +21,7 @@
 from warnings import warn
 from copy import deepcopy
 from cobra.query import *
+from cobra.oven.id_list import id_list
 from cobra.flux_analysis import optimize_cplex, optimize_glpk, optimize_gurobi
 from Object import Object
 from Reaction import Reaction
@@ -88,14 +89,17 @@
         self.legacy_format = False #DEPRECATED
         #Allow the creation of an empty object which will facilitate development
         #of SBML parsers and other development issues.
-        self.genes = []
-        self.reactions = [] #A list of cobra.Reactions
-        self.metabolites = [] #A list of cobra.Metabolites
+        self.genes = id_list()
+        self.reactions = id_list() #A list of cobra.Reactions
+        self.metabolites = id_list() #A list of cobra.Metabolites
+        self.compartments = {}
+        
+        # DEPRACATE THESE
         self._metabolite_dict = {} #A dictionary that provides access to
         #metabolites based on their ids {Metabolite.id: Metabolite}
         self._gene_dict = {} #A dictionary that provides access to
         #genes based on their ids {Gene.id: Gene}
-        self.compartments = {}
+        
 
         #DEPRECATED
         #Pretty much all of these things are unnecessary to use the objects and
@@ -160,13 +164,13 @@
         if print_time:
             from time import time
             start_time = time()
-        the_metabolites = [x.guided_copy(the_copy)
-                           for x in self.metabolites]
+        the_metabolites = id_list([x.guided_copy(the_copy)
+                           for x in self.metabolites])
         if print_time:
             print 'Metabolite guided copy: %1.4f'%(time() - start_time)
             start_time = time()
-        the_genes = [x.guided_copy(the_copy)
-                           for x in self.genes]
+        the_genes = id_list([x.guided_copy(the_copy)
+                           for x in self.genes])
         if print_time:
             print 'Gene guided copy: %1.4f'%(time() - start_time)
             start_time = time()
@@ -174,8 +178,8 @@
                                  for k in the_metabolites])
         gene_dict = dict([(k.id, k)
                                  for k in the_genes])
-        the_reactions = [x.guided_copy(the_copy, metabolite_dict, gene_dict)
-                         for x in self.reactions]
+        the_reactions = id_list([x.guided_copy(the_copy, metabolite_dict,gene_dict)
+                         for x in self.reactions])
         if print_time:
             print 'Reaction guided copy: %1.4f'%(time() - start_time)
         the_copy.reactions = the_reactions
@@ -205,9 +209,10 @@
             metabolite_list = [metabolite_list]
         #First check whether the metabolites exist in the model
         metabolite_list = [x for x in metabolite_list
-                           if x.id not in self._metabolite_dict]
+                           if x.id not in self.metabolites]
         self.metabolites += metabolite_list
         [setattr(x, '_model', self) for x in metabolite_list]
+        # remove next line
         self._metabolite_dict.update(dict([(x.id, x)
                                            for x in metabolite_list]))
         #This might already be encapsulated in update_stoichiometric matrix, but
@@ -254,7 +259,7 @@
             self._objective_coefficients[reaction_index] = the_reaction.objective_coefficient
             self.add_metabolites(the_reaction._metabolites)
             #Make sure that the metabolites are the ones contained in the model
-            the_reaction._metabolites = [self._metabolite_dict[x.id]
+            the_reaction._metabolites = [self.metabolites.get_by_id[x.id]
                                         for x in the_reaction._metabolites]
             #Update the stoichiometric matrix
             metabolite_indices = map(self.metabolites.index, the_reaction._metabolites)
@@ -295,35 +300,33 @@
         """
         #Only add the reaction if one with the same ID is not already
         #present in the model.
-        if type(reaction_list) not in [tuple, list, set]:
+        
+        if not hasattr(reaction_list, "__len__") and \
+           not isinstance(reaction_list, basestring):
             reaction_list = [reaction_list]
         reactions_in_model = set([x.id
                                   for x in reaction_list]).intersection([x.id
-                                                                       for x in self.reactions])
+                                                                      for x in self.reactions])
         if len(reactions_in_model) > 0:
-            print '%i of %i reaction(s) %s already in the model'%(len(reactions_in_model),
-                                                          len(reaction_list), repr(reactions_in_model))
+            print '%i of %i reaction(s) %s already in the model' \
+            %(len(reactions_in_model), len(reaction_list), repr(reactions_in_model))
             return
-
-        metabolite_dict = {}
-        [metabolite_dict.update(dict([(y.id, y) for y in x._metabolites]))
-         for x in reaction_list]
-
-        new_metabolites = [metabolite_dict[x]
-                           for x in set(metabolite_dict).difference(self._metabolite_dict)]
-        if new_metabolites:
+        
+        # identify new metabolites and genes in the reactions to add
+        new_metabolites = id_list()
+        new_genes = id_list()
+        for reaction in reaction_list:
+            new_metabolites.union(reaction._metabolites)
+            new_genes.union(reaction._genes)
+        # add in the new metabolites and genes
+        if len(new_metabolites):
             self.add_metabolites(new_metabolites)
-
-        gene_dict = {}
-        [gene_dict.update(dict([(y.id, y) for y in x._genes]))
-         for x in reaction_list]
         
-        new_genes = [gene_dict[x]
-                           for x in set(gene_dict).difference(self._gene_dict)]
-        if new_genes:
+        if len(new_genes):
             self.genes += new_genes
             [setattr(x, '_model', self)
              for x in new_genes]
+            # delete the next line when _gene_dict is removed
             self._gene_dict.update(dict([(x.id, x) for x in new_genes]))
 
 
@@ -333,9 +336,9 @@
         #metabolites in the Model and genes in the Model
         for the_reaction in reaction_list:
             the_reaction._model = self
-            the_reaction._metabolites = dict([(self._metabolite_dict[k.id], v)
+            the_reaction._metabolites = dict([(self.metabolites.get_by_id(k.id), v)
                                              for k, v in the_reaction._metabolites.items()])
-            the_reaction._genes = dict([(self._gene_dict[k.id], v)
+            the_reaction._genes = dict([(self.genes.get_by_id(k.id), v)
                                              for k, v in the_reaction._genes.items()])
             #Make sure the metabolites and genes are aware of the reaction
             the_reaction._update_awareness()
@@ -440,28 +443,18 @@
         
 
         #Update the stoichiometric matrix
-        #Using this dictionary speeds up adding reactions by orders of magnitude
-        #because indexing lists is slow in python.
         #Get stats to decide how to grow self._S
-        number_of_reactions = len(reaction_list)
-        number_of_reactions_in_model = len(self.reactions) - number_of_reactions
-        reaction_to_index_dict = dict(zip([x.id for x in reaction_list],
-                                          range(number_of_reactions_in_model,
-                                                number_of_reactions_in_model +\
-                                                number_of_reactions)))
 
-
-
+        
         #Use dok format to speed up additions.
+        #SPEED this up. This is the slow part. 
+        #The id_list class has a fast (dict based) indexing function
         coefficient_dictionary = {}
-        #SPEED this up. This is the slow part.  Can probably use a dict to index.
-        metabolite_to_index_dict = dict(zip([x.id for x in self.metabolites],
-                                            range(len(self.metabolites))))
         for the_reaction in reaction_list:
-            reaction_index = reaction_to_index_dict[the_reaction.id]
-            [coefficient_dictionary.update({(metabolite_to_index_dict[k.id],
-                                             reaction_index): v})
-             for k, v in the_reaction._metabolites.items()]
+            reaction_index = self.reactions.index(the_reaction.id)
+            for k, v in the_reaction._metabolites.items():
+                coefficient_dictionary[(self.metabolites.index(k.id),
+                                             reaction_index)] = v
         if not self._S.getformat() == 'dok':
             self._S = self._S.todok()
         self._S.update(coefficient_dictionary)
@@ -549,16 +542,14 @@
         the_solution = None
         try:
             the_solution = solve_problem(solver_function)
-        except Exception, e:
-            print e
+        except:
             print '%s did not work'%solver
             for solver, solver_function in solver_dict.items():
                 try:
                     print "now trying %s"%solver
                     the_solution = solve_problem(solver_function)
                     break
-                except Exception, e:
-                    print e
+                except:
                     print '%s did not work'%solver
                     continue
 
