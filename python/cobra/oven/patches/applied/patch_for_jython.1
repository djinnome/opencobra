Index: test/__init__.py
===================================================================
--- test/__init__.py	(revision 309)
+++ test/__init__.py	(working copy)
@@ -1,19 +1,27 @@
-from os.path import abspath as _abspath
-from os.path import join as _join
-from os.path import split as _split
-from os.path import sep as _sep
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    raise Exception("%s is not yet supported on jython"%__modules[__name__])
 
-data_directory = _join(_split(_abspath(__file__))[0], "data")
-if not data_directory.endswith(_sep):
-    data_directory += _sep
+del __name, __modules
 
-salmonella_sbml = _join(data_directory, "salmonella.xml")
-salmonella_pickle = _join(data_directory, "salmonella.pickle")
-salmonella_reaction_p_values_pickle = _join(data_directory, "salmonella_reaction_p_values.pickle")
-ecoli_sbml = _join(data_directory, "iJO1366.xml")
-ecoli_pickle = _join(data_directory, "iJO1366.pickle")
-ecoli_mat = _join(data_directory, "iJO1366.mat")
+from os.path import abspath as __abspath
+from os.path import join as __join
+from os.path import split as __split
+from os.path import sep as __sep
 
+data_directory = __join(__split(__abspath(__file__))[0], "data")
+if not data_directory.endswith(__sep):
+    data_directory += __sep
+
+salmonella_sbml = __join(data_directory, "salmonella.xml")
+salmonella_pickle = __join(data_directory, "salmonella.pickle")
+salmonella_reaction_p_values_pickle = __join(data_directory, "salmonella_reaction_p_values.pickle")
+ecoli_sbml = __join(data_directory, "iJO1366.xml")
+ecoli_pickle = __join(data_directory, "iJO1366.pickle")
+ecoli_mat = __join(data_directory, "iJO1366.mat")
+
 def create_test_model(test_pickle=salmonella_pickle):
     """returns the salmonella model for testing"""
     try:
@@ -41,10 +49,7 @@
     test_all()
     sys.path.pop(0)
 
-del _abspath
-del _join
-del _split
-del _sep
+del __abspath, __join, __split, __sep
 
 if __name__ == '__main__':
     test_all()
Index: flux_analysis/__init__.py
===================================================================
--- flux_analysis/__init__.py	(revision 309)
+++ flux_analysis/__init__.py	(working copy)
@@ -1,5 +1,19 @@
-from ..solvers import *
-from essentiality import *
-from variability import *
-from single_deletion import single_deletion
-from double_deletion import double_deletion, double_deletion_parallel
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+
+else:
+    from ..solvers import *
+    from essentiality import *
+    from variability import *
+    from single_deletion import single_deletion
+    from double_deletion import double_deletion, double_deletion_parallel
+del __name, __modules
+
+
+
+
+
+
Index: __init__.py
===================================================================
--- __init__.py	(revision 309)
+++ __init__.py	(working copy)
@@ -1,10 +1,14 @@
 import sys
 __version__ = '0.1.0.b1'
-if hasattr(sys, 'JYTHON_JAR'):
-    raise Exception("Experimental modules of numpy/scipy for java that are" +\
-    "not yet ready for prime time.")
-    import cobra.oven.hyduke.numpy as numpy
-    import cobra.oven.hyduke.scipy as scipy
-from core import *
+from os import name as __name
+if __name == 'java':
+    #raise Exception("Experimental modules of numpy/scipy for java that are" +\
+    #"not yet ready for prime time.")
+    import oven.danielhyduke.jython.numpy as numpy
+    import oven.danielhyduke.jython.scipy as scipy
+    from core import Object, Formula, Metabolite, Gene, Reaction, Model
+else:
+    from core import *
+del __name
 __doc__ = """
 """
Index: core/__init__.py
===================================================================
--- core/__init__.py	(revision 309)
+++ core/__init__.py	(working copy)
@@ -6,6 +6,8 @@
 from .Reaction import Reaction
 from .Solution import Solution
 from .Model import Model 
-from .ArrayBasedModel import ArrayBasedModel 
+from os import name as __name
+if __name != 'java':
+    from .ArrayBasedModel import ArrayBasedModel 
 
 
Index: solvers/__init__.py
===================================================================
--- solvers/__init__.py	(revision 309)
+++ solvers/__init__.py	(working copy)
@@ -1,96 +1,105 @@
 # attempt to import all working solvers in this directory
-__legacy_solver = True
-solver_dict = {}
-if __legacy_solver:
-    from .legacy import _optimize_glpk, _optimize_gurobi, _optimize_cplex
-    solver_dict = {'glpk': _optimize_glpk,
-                   'gurobi': _optimize_gurobi,
-                   'cplex': _optimize_cplex}
-    for solver_module in ['glpk', 'cplex']:
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    #warn("%s is not yet supported on jython"%__modules[__name__])
+    def optimize():
+        print "No solvers for jython yet"
+else:
+    __legacy_solver = True
+    solver_dict = {}
+    if __legacy_solver:
+        from .legacy import _optimize_glpk, _optimize_gurobi, _optimize_cplex
+        solver_dict = {'glpk': _optimize_glpk,
+                       'gurobi': _optimize_gurobi,
+                       'cplex': _optimize_cplex}
+        for solver_module in ['glpk', 'cplex']:
+            try:
+                exec('from %s import *'%solver_module)
+            except:
+                solver_dict.pop(solver_module)
         try:
-            exec('from %s import *'%solver_module)
+            from gurobipy import *
         except:
-            solver_dict.pop(solver_module)
-    try:
-        from gurobipy import *
-    except:
-        solver_dict.pop('gurobi')
-        
-        
-else:
-    from os import listdir as _listdir
-    from os import path as _path
-    for i in _listdir(_path.split(_path.abspath(__file__))[0]):
-        if i.startswith("_") or i.startswith("."):
-            continue
-        if not i.endswith(".py"):
-            continue
-        try:
-            m = i.strip(".py")
-            exec("from . import %s" % m)
-            solver_dict[m] = eval(m)
-        except Exception, e:
-            pass
-    del _path
-    del _listdir
-    del i
-    m = None
-    del m
+            solver_dict.pop('gurobi')
 
-def optimize(cobra_model, solver='glpk', error_reporting=False, **kwargs):
-    """Wrapper to optimization solvers
-    
 
-    """
-    #If the default solver is not installed then use one of the others
-    try:
-        solver_function = solver_dict[solver]
-    except:
+    else:
+        from os import listdir as _listdir
+        from os import path as _path
+        for i in _listdir(_path.split(_path.abspath(__file__))[0]):
+            if i.startswith("_") or i.startswith("."):
+                continue
+            if not i.endswith(".py"):
+                continue
+            try:
+                m = i.strip(".py")
+                exec("from . import %s" % m)
+                solver_dict[m] = eval(m)
+            except Exception, e:
+                pass
+        del _path
+        del _listdir
+        del i
+        m = None
+        del m
+
+    def optimize(cobra_model, solver='glpk', error_reporting=False, **kwargs):
+        """Wrapper to optimization solvers
+
+
+        """
+        #If the default solver is not installed then use one of the others
         try:
-            solver, solver_function = solver_dict.items()[0]
+            solver_function = solver_dict[solver]
         except:
-            raise Exception("It appears that you do not have one of the supported solvers "+\
-                            "(glpk, gurobi, or cplex) installed")
-    the_solution = None
-    if __legacy_solver:
-        def solve_problem(solver_function, kwargs):
-            return solver_function(cobra_model, **kwargs)
-        try:
-            the_solution = solve_problem(solver_function, kwargs)
-        except Exception, e:
-            if error_reporting:
-                print e
-                print '%s did not work'%solver
-            solver_keys = solver_dict.keys()
-            solver_keys.remove(solver)
-            for solver in solver_keys:
-                solver_function = solver_dict[solver]
-                try:
-                    if error_reporting:
-                        print "now trying %s"%solver
-                    the_solution = solve_problem(solver_function, kwargs)
-                    break
-                except Exception, e:
-                    if error_reporting:
-                        print e
-                        print '%s did not work'%solver
-                    continue
+            try:
+                solver, solver_function = solver_dict.items()[0]
+            except:
+                raise Exception("It appears that you do not have one of the supported solvers "+\
+                                "(glpk, gurobi, or cplex) installed")
+        the_solution = None
+        if __legacy_solver:
+            def solve_problem(solver_function, kwargs):
+                return solver_function(cobra_model, **kwargs)
+            try:
+                the_solution = solve_problem(solver_function, kwargs)
+            except Exception, e:
+                if error_reporting:
+                    print e
+                    print '%s did not work'%solver
+                solver_keys = solver_dict.keys()
+                solver_keys.remove(solver)
+                for solver in solver_keys:
+                    solver_function = solver_dict[solver]
+                    try:
+                        if error_reporting:
+                            print "now trying %s"%solver
+                        the_solution = solve_problem(solver_function, kwargs)
+                        break
+                    except Exception, e:
+                        if error_reporting:
+                            print e
+                            print '%s did not work'%solver
+                        continue
 
-    else:
-        the_solution = solver_function.solve(cobra_model, **kwargs)
-        #raise Exception("New style solvers not yet fully implemented")
+        else:
+            the_solution = solver_function.solve(cobra_model, **kwargs)
+            #raise Exception("New style solvers not yet fully implemented")
 
 
-    #Add the solution to the model.
-    #Please note that it will be faster to dress the reactions and metabolites
-    #with their values within the new style solvers instead of here.
-    if the_solution is None:
-        cobra_model.solution = the_solution
-        return(the_solution)
-    else:
-        if __legacy_solver:
-            cobra_model.solution = the_solution['the_solution']
-            return(the_solution['the_problem'])
+        #Add the solution to the model.
+        #Please note that it will be faster to dress the reactions and metabolites
+        #with their values within the new style solvers instead of here.
+        if the_solution is None:
+            cobra_model.solution = the_solution
+            return(the_solution)
         else:
-            cobra_model.solution = the_solution
+            if __legacy_solver:
+                cobra_model.solution = the_solution['the_solution']
+                return(the_solution['the_problem'])
+            else:
+                cobra_model.solution = the_solution
 
+del __name, __modules
Index: stats/__init__.py
===================================================================
--- stats/__init__.py	(revision 309)
+++ stats/__init__.py	(working copy)
@@ -1 +1,9 @@
-from stats import *
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+
+else:
+    from stats import *
+del __name, __modules
Index: manipulation/delete.py
===================================================================
--- manipulation/delete.py	(revision 309)
+++ manipulation/delete.py	(working copy)
@@ -1,6 +1,4 @@
 #cobra.manipulation.modify.py
-from scipy import sparse
-from numpy import where, array, ones
 import re
 from copy import deepcopy
 def prune_unused_metabolites(cobra_model):
Index: manipulation/modify.py
===================================================================
--- manipulation/modify.py	(revision 309)
+++ manipulation/modify.py	(working copy)
@@ -1,8 +1,5 @@
 #cobra.manipulation.modify.py
 from copy import deepcopy
-
-from scipy import sparse
-from numpy import where, array, ones
 from cobra.core.Reaction import Reaction
 def add_exchange_reaction(cobra_model, the_metabolites,
                           reaction_reversibility=False):
Index: tools/__init__.py
===================================================================
--- tools/__init__.py	(revision 309)
+++ tools/__init__.py	(working copy)
@@ -1 +1,11 @@
-from tools import *
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+
+else:
+    from tools import *
+del __name, __modules
+
+
Index: io/__init__.py
===================================================================
--- io/__init__.py	(revision 309)
+++ io/__init__.py	(working copy)
@@ -1,9 +1,21 @@
-try:
-    from .sbml import create_cobra_model_from_sbml_file as read_sbml_model
-    from .sbml import read_legacy_sbml
-    from .sbml import write_cobra_model_to_sbml_file as write_sbml_model
-except ImportError, error:
-    from warnings import warn
-    warn("cobra.io.sbml will not be functional: ImportError %s" % error)
-from .mat import load_matlab_model
-from .mat import save_matlab_model
\ No newline at end of file
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+
+else:
+    try:
+        from .sbml import create_cobra_model_from_sbml_file as read_sbml_model
+        from .sbml import read_legacy_sbml
+        from .sbml import write_cobra_model_to_sbml_file as write_sbml_model
+    except ImportError, error:
+        from warnings import warn
+        warn("cobra.io.sbml will not be functional: ImportError %s" % error)
+    from .mat import load_matlab_model
+    from .mat import save_matlab_model
+
+del __name, __modules
+
+
+
Index: mlab/__init__.py
===================================================================
--- mlab/__init__.py	(revision 309)
+++ mlab/__init__.py	(working copy)
@@ -1,4 +1,12 @@
-from mlab import *
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+else:
+    from mlab import *
+del __name, __modules
+
 __doc__ = """
 Provides python functions which are useful for interacting with MATLAB
 by using the mlabwrap library.
Index: topology/__init__.py
===================================================================
--- topology/__init__.py	(revision 309)
+++ topology/__init__.py	(working copy)
@@ -1 +1,9 @@
-from reporter_metabolites import *
+from os import name as __name
+from sys import modules as __modules
+from warnings import warn
+if __name == 'java':
+    warn("%s is not yet supported on jython"%__modules[__name__])
+
+else:
+    from reporter_metabolites import *
+del __name, __modules
