Index: __init__.py
===================================================================
--- __init__.py	(revision 235)
+++ __init__.py	(working copy)
@@ -1 +1,7 @@
 from mlab import *
+__doc__ = """
+Provides python functions which are useful for interacting with MATLAB
+by using the mlabwrap library.
+
+To use MATLAB functions directly, see cobra.matlab
+"""
Index: mlab.py
===================================================================
--- mlab.py	(revision 235)
+++ mlab.py	(working copy)
@@ -1,13 +1,75 @@
 #cobra.mlab.py
 #System modules
-import cPickle,numpy, os, cobra
+import cPickle, numpy, os, cobra, warnings
 from copy import deepcopy
 from scipy.sparse import dok_matrix
 from cobra import Model, Reaction, Metabolite, Formula
-mlab_path = cobra.__path__[0] + '/mlab/matlab_scripts/'
+
 from mlabwrap import mlab as matlab
 
+# give an interface to the mlab system through cobra.matlab
+cobra.matlab = matlab
+matlab.__doc__ = """
+This is an mlabwrap connection to MATLAB which can be used to call
+MATLAB functions. For example, if model is a python model, the following
+can be used to optimize the model in MATLAB:
+> matlab_model = cobra.mlab.cobra_model_object_to_cobra_matlab_struct(model)
+> result = cobra.matlab.optimizeCbModel(matlab_model)
+
+Any MATLAB function can be called this way"""
+
+# add path with module's python scripts to the MATLAB path
+mlab_path = os.path.join(cobra.__path__[0], 'mlab', 'matlab_scripts')
 matlab.addpath(mlab_path)
+
+# functions which should get loaded into the matlab namespace
+_useful_matlab_functions = ["plot", "figure", "hist", "load", "find"]
+
+def init_matlab_toolbox(matlab_cobra_path=None):
+    """initialize the matlab cobra toolbox, and load its functions
+    into mlab's namespace (very useful for ipython tab completion)
+
+    matlab_cobra_path: the path to the directory containing the MATLAB
+    cobra installation. Using the default None will attempt to find the
+    toolbox in the MATLAB path"""
+    if matlab_cobra_path is None:
+        matlab_cobra_path, tmp = os.path.split(
+            cobra.matlab.which('initCobraToolbox'))
+    if not os.path.isfile(os.path.join(matlab_cobra_path, "initCobraToolbox.m")):
+        print "initCobraToolbox not found in given path"
+        return
+    # store the current directory so we can return to it
+    curdir = os.path.abspath(os.curdir)
+    # if the user has a pathdef file, it will not get used by the MATLAB
+    # engine, so it needs to be called manually
+    try:
+        os.chdir(matlab_home)
+        matlab.path(matlab.pathdef())
+    except:
+        pass
+    os.chdir(matlab_cobra_path)
+    matlab.initCobraToolbox()
+    os.chdir(curdir)
+    
+    # discover MATLAB functions
+    with warnings.catch_warnings():
+        warnings.simplefilter("ignore")
+        os.path.walk(matlab_cobra_path, _probe, None)
+        os.path.walk(mlab_path, _probe, None)
+        for function in _useful_matlab_functions:
+            exec("matlab.%s.__doc__" % function)
+
+
+def _probe(arg, path, files):
+    """Given a list of files, call __doc__ on each MATLAB function
+    so that mlab discovers they are real functions"""
+    for file in files:
+        if file.endswith(".m"):
+            try:
+                exec("matlab.%s.__doc__" % file.replace(".m", ""))
+            except:
+                pass
+
 #Project defined modules
 def matlab_cell_to_python_list(the_cell):
     try:
@@ -330,5 +392,3 @@
     else:
         print 'FAILURE: pyCOBRA and COBRA Toolbox do not match: %s !~ %s'%(py_cobra_solution,
                                                                                        matlab_solution)
-
-        
