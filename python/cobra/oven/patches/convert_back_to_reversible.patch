Index: manipulation/modify.py
===================================================================
--- manipulation/modify.py	(revision 197)
+++ manipulation/modify.py	(working copy)
@@ -1,5 +1,6 @@
 #cobra.manipulation.modify.py
 import sys
+import re
 from copy import deepcopy
 from cobra.core.Metabolite import Metabolite
 from cobra.core.Gene import Gene
@@ -132,7 +133,7 @@
         else:
             the_reaction.lower_bound = medium_composition[the_component]
 
-
+reverse_flag = "_reverse"
 def convert_to_irreversible(cobra_model):
     """Will break all of the reversible reactions into two separate irreversible reactions with
     different directions.  Useful for some modeling problems.
@@ -147,17 +148,37 @@
         #and this would result in adding an empty reaction to the
         #model in addition to the reverse reaction.
         if reaction.lower_bound < 0:
-            reverse_reaction = Reaction(reaction.id + "_reverse")
+            reverse_reaction = Reaction(reaction.id + reverse_flag)
             reverse_reaction.lower_bound = 0
             reverse_reaction.upper_bound = reaction.lower_bound * -1
+            reverse_reaction.objective_coefficient = reaction.objective_coefficient * -1
             reaction.lower_bound = 0
             reaction_dict = dict([(k, v*-1)
                                   for k, v in reaction._metabolites.items()])
             reverse_reaction.add_metabolites(reaction_dict)
             reactions_to_add.append(reverse_reaction)
     cobra_model.add_reactions(reactions_to_add)
- 
-    
+
+def convert_back_to_reversible(cobra_model):
+    """Convert a model previously made irreversible back"""
+    # for every reaction that now has a "_reverse"
+    splitter = re.compile(reverse_flag + "$")
+    for reverse_reaction in cobra_model.reactions.query(splitter):
+        reaction = cobra_model.reactions.get_by_id(
+            splitter.split(reverse_reaction.id)[0])
+        reaction.lower_bound = reverse_reaction.upper_bound * -1
+        if hasattr(reverse_reaction, "x"):
+            if reverse_reaction.x != 0:
+                reaction.x += -1 * reverse_reaction.x
+    cobra_model.remove_reactions(cobra_model.reactions.query(splitter))
+    if not hasattr(cobra_model, "solution"):
+        return
+    x_dict = cobra_model.solution.x_dict
+    if x_dict is None:
+        return
+    for reaction in cobra_model.reactions:
+        cobra_model.solution.x_dict[reaction.id] = reaction.x
+        
    
 def convert_rule_to_boolean_rule(cobra_model, the_rule,
                                  return_gene_indices=False,
