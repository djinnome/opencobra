Index: core/Model.py
===================================================================
--- core/Model.py	(revision 160)
+++ core/Model.py	(working copy)
@@ -522,10 +522,7 @@
             self.solution = None
             return(the_solution)
         else:
-            self.solution = Solution(the_solution['objective value'],
-                                     array(the_solution['x']),
-                                     x_dict=the_solution['x_dict'],
-                                     status=the_solution['status'])
+            self.solution = Solution(the_solution)
             return(the_solution['the_problem'])
 
     def get_active_genes(self):
Index: core/Solution.py
===================================================================
--- core/Solution.py	(revision 160)
+++ core/Solution.py	(working copy)
@@ -6,15 +6,21 @@
 class Solution(Object):
     """Stores the solution from optimizing a cobra.Model
     """
-    def __init__(self, the_f, the_x, the_stat=1,
-                 the_solver=None, the_time=0, x_dict={},
-                 status='NA'):
-        Object.__init__(self, the_f)
-        self.solver = the_solver
-        self.f = the_f
-        self.x = the_x
-        self.x_dict = x_dict
-        self.status = status
+    def __init__(self, the_solution):
+        if the_solution.has_key("objective_value"):
+            id = the_solution["objective_value"]
+        elif the_solution.has_key("f"):
+            id = the_solution["f"]
+        else:
+            id = "solution"
+        Object.__init__(self, id)
+        for key, value in the_solution.iteritems():
+            key = key.replace(" ", "_")
+            key = key.replace("\t", "_")
+            setattr(self, key, value)
+        if not the_solution.has_key("f") and \
+                the_solution.has_key("objective_value"):
+            self.f = self.objective_value
 #
 #END Class Solution
 #########################
Index: flux_analysis/solvers.py
===================================================================
--- flux_analysis/solvers.py	(revision 159)
+++ flux_analysis/solvers.py	(working copy)
@@ -292,7 +292,7 @@
             print 'cplex failed: %s'%lp.status
 
 
-    solution = {'the_problem': lp, 'objective value': objective_value,
+    solution = {'the_problem': lp, 'objective_value': objective_value, 'solver' : 'cplex',
                 'status': status, 'x': array(x), 'x_dict': x_dict}
     return solution    
    
@@ -504,7 +504,7 @@
         objective_value = nan
         if error_reporting:
             print 'gurobi failed: %s'%lp.status  
-    solution = {'the_problem': lp, 'objective value': objective_value,
+    solution = {'the_problem': lp, 'objective_value': objective_value, 'solver' : 'gurobi',
                 'status': status, 'x': array(x), 'x_dict': x_dict}
     return solution
 
@@ -759,6 +759,8 @@
         print 'simplex time: %f'%(time() - start_time)
     x = []
     x_dict = {}
+    y = []
+    y_dict = {}
     status = lp.status
     if status == 'opt':
         objective_value = lp.obj.value
@@ -767,10 +769,17 @@
         objective_value = nan
         if error_reporting:
             print 'glpk failed: %s'%lp.status
-    [(x.append(float(c.primal)), x_dict.update({c.name:c.primal})) for c in lp.cols]
-    solution = {'the_problem': lp, 'status': status,
-                'objective value': objective_value,
-                'x': array(x), 'x_dict': x_dict}
+    # extract values
+    for c in lp.cols:
+        x.append(float(c.primal))
+        x_dict[c.name] = c.primal
+        y.append(float(c.primal))
+        y_dict[c.name] = c.dual
+    # pack everything into a dict and return it
+    solution = {'the_problem' : lp, 'status' : status, 'solver' : 'glpk',
+                'objective_value': objective_value,
+                'x' : array(x), 'x_dict': x_dict,
+                'y' : array(y), 'y_dict' : y_dict}
     return solution
 
 
@@ -807,11 +816,11 @@
         start_time = time()
         the_solution = the_function(cobra_model, the_problem='return', print_solver_time=True)
         print '%s cold start: %f'%(the_solver, time() - start_time)
-        if round(the_solution['objective value'], 2) != the_growth_rate:
-            print 'Simulation failed %f to match expectation %f'%(the_solution['objective value'],
+        if round(the_solution['objective_value'], 2) != the_growth_rate:
+            print 'Simulation failed %f to match expectation %f'%(the_solution['objective_value'],
                                                                   the_growth_rate)
         the_solution = the_function(cobra_model, the_problem=the_solution['the_problem'], print_solver_time=True)
         print '%s hot start: %f'%(the_solver, time() - start_time)
-        if round(the_solution['objective value'], 2) != the_growth_rate:
-            print 'Simulation failed %f to match expectation %f'%(the_solution['objective value'],
+        if round(the_solution['objective_value'], 2) != the_growth_rate:
+            print 'Simulation failed %f to match expectation %f'%(the_solution['objective_value'],
                                                                   the_growth_rate)                                                                 
